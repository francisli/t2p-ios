# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    begin
      # rebuild cocoapods so that env vars get updated
      cocoapods

      # get bundle version of app
      prev_version = get_info_plist_value(path: "./Triage/Info.plist", key: "CFBundleVersion").to_i
      new_version = prev_version + 1

      # check if we're deploying a new version
      head_commit = `git rev-parse HEAD`
      prev_commit = `git rev-parse #{prev_version}`
      changelog = nil
      commit_after_upload = true
      if head_commit != prev_commit
        # increment build
        increment_build_number(xcodeproj: "Triage.xcodeproj")
      else
        # adjust version numbers
        prev_version -= 1
        new_version -= 1
        commit_after_upload = false
      end
      # generate a changelog from previous version to head
      changelog = `git log --pretty=format:'%s' #{prev_version}..HEAD`
      changelog = changelog.gsub(/Build \d+\n?/, '')
      changelog = "Build #{new_version}\n\n#{changelog}"
      puts "\n\n#{changelog}\n\n"
      build_app(
        workspace: "Triage.xcworkspace",
        scheme: "Triage",
        export_options: {
          provisioningProfiles: {
            "net.peakresponse.Triage": "net.peakresponse.Triage App Store",
          }
        }
      )
      upload_to_testflight(changelog: changelog)
      # if successful, commit build version changes and tag
      if commit_after_upload
        `git add ..`
        `git commit -m "Build #{new_version}"`
        `git tag #{new_version}`
        `git push`
        `git push --tag`
      end
    rescue
      # on error, revert any project/version changes
      `git restore ..`
    end
  end
end
